@external propSource highlighting from "./highlight"

@skip { space }

@top Program { (statement | newlineOrSemicolon)+ eof?}

statement { 
  line newlineOrSemicolon |
  line eof
}

@tokens {
  @precedence { Number "-" }
  
  NamedArgPrefix { $[a-z]+ "=" }
  Number { "-"? $[0-9]+ ('.' $[0-9]+)? }
  Boolean { "true" | "false" }
  String { '\'' ![']* '\'' }
  newlineOrSemicolon { "\n" | ";" }
  eof { @eof }
  space { " " | "\t" }
  leftParen { "(" }
  rightParen { ")" }
  ":"
  "fn"
  "end"
  "="
  "+"[@name=operator]
  "-"[@name=operator]
  "*"[@name=operator]
  "/"[@name=operator]  
}

@external tokens tokenizer from "./tokenizer" { Identifier, Word }

@precedence {   
  multiplicative @left,
  additive @left
  call
}

line {
  FunctionCall | 
  FunctionCallOrIdentifier |
  FunctionDef |
  Assign |
  expressionWithoutIdentifier
}

expression {
  expressionWithoutIdentifier | Identifier
}

expressionWithoutIdentifier {
  BinOp |
  valueWithoutIdentifier
}


FunctionCallOrIdentifier { 
  Identifier
}

FunctionCall {
  Identifier arg+
}

arg {
  PositionalArg | NamedArg
}

PositionalArg {
  value
}

NamedArg {
  NamedArgPrefix value
}

FunctionDef {
  singleLineFunctionDef | multilineFunctionDef
}

singleLineFunctionDef {
  "fn" Params ":" expression
}

multilineFunctionDef {
  "fn" Params ":" newlineOrSemicolon (expression newlineOrSemicolon)* "end"
}

Params {
  Identifier*
}

Assign {
  Identifier "=" line
}

BinOp {
  expression !multiplicative "*" expression |
  expression !multiplicative "/" expression |
  expression !additive "+" expression |
  expression !additive "-" expression
}

ParenExpr {
  leftParen (expressionWithoutIdentifier | FunctionCall | FunctionCallOrIdentifier) rightParen
}

value {
  valueWithoutIdentifier | Identifier
}

valueWithoutIdentifier {
  ParenExpr | Word | String | Number | Boolean
}
