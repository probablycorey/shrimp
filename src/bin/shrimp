#! /usr/bin/env bun

import { parser } from '../parser/shrimp.js'
import { evaluate } from '../interpreter/evaluator.js'

const log = (...args: any[]) => console.log(...args)
log.error = (...args: any[]) => console.error(...args)

const repl = async () => {
  log()
  log('\033[38;5;219m»……¬¯\033[0m Shrimp REPL \033[38;5;219m¯¬……«\033[0m')
  log()
  process.stdout.write('> ')

  const context = new Map<string, any>()
  for await (const chunk of Bun.stdin.stream()) {
    const input = new TextDecoder().decode(chunk).trim()

    try {
      const tree = parser.parse(input)
      const output = evaluate(input, tree, context)
      log(output)
    } catch (error) {
      log.error(`${error.message}`)
    }

    process.stdout.write('> ')
  }
}

try {
  repl()
} catch (error) {
  log.error(`Fatal Error: ${error.message}`)
}
